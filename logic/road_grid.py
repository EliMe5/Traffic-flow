import numpy as np

Converter = {
    (0,0): np.array([
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0]
    ]),
    (1,0): np.array([
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0]
    ]),
    (2,90): np.array([
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0]
    ]),
    (2,0): np.array([
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 1, 1, 1],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0]
    ]),
    (2,270): np.array([
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0]
    ]),
    (2,180): np.array([
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0]
    ]),
    (3,90): np.array([
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0]
    ]),
    (3,0): np.array([
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0]
    ]),
    (4,180): np.array([
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 1, 1, 1],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0]
    ]),
    (4,90): np.array([
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 1, 1, 1],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0]
    ]),
    (4,0): np.array([
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0]
    ]),
    (4,270): np.array([
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [1, 1, 1, 1, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0]
    ]),
    (5,0): np.array([
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 1, 1, 1],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0]
    ]),
    (5,270): np.array([
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 1, 1],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0]
    ]),
    (5,180): np.array([
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [1, 1, 1, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0]
    ]),
    (5,90): np.array([
        [0, 0, 0, 1, 0, 0, 0], # . . . │ . . .
        [0, 0, 0, 1, 0, 0, 0], # . . . │ . . .
        [0, 0, 0, 1, 0, 0, 0], # . . . │ . . .
        [1, 1, 1, 1, 1, 1, 1], # ─ ─ ─ ┴ ─ ─ ─
        [0, 0, 0, 0, 0, 0, 0], # . . . . . . .
        [0, 0, 0, 0, 0, 0, 0], # . . . . . . .
        [0, 0, 0, 0, 0, 0, 0]  # . . . . . . .
    ]),
    (6,0): np.array([
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [1, 1, 1, 3, 1, 1, 1],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0]
    ]),
    (7,0): np.array([
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [1, 1, 1, 4, 1, 1, 1],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0]
    ]),
    (7,1): np.array([
        [0, 0, 0, 1, 0, 0, 0],
        [0, 1, 1, 1, 1, 1, 0],
        [0, 1, 0, 0, 0, 1, 0],
        [1, 1, 0, 0, 0, 1, 1],
        [0, 1, 0, 0, 0, 1, 0],
        [0, 1, 1, 1, 1, 1, 0],
        [0, 0, 0, 1, 0, 0, 0]
    ])
}

def rescale_roads(small_road):
    new_road = np.zeros((7 * len(small_road[0]), 7 * len(small_road[0])))
    coordinate_road = np.zeros((7 * len(small_road[0]), 7 * len(small_road[0])))
    non_zero_coordinates = []

    for y in range(len(small_road[0])):
        for x in range(len(small_road[0])):
            new_road[y*7:y*7+7,x*7:x*7+7] = Converter.get(small_road[y][x])
            if small_road[y][x] == (7,0):
                coordinate_road[y*7:y*7+7,x*7:x*7+7] = Converter.get((7,1))
            else:
                coordinate_road[y*7:y*7+7,x*7:x*7+7] = Converter.get(small_road[y][x])
    
    for y in range(len(coordinate_road)):
        for x in range(len(coordinate_road[y])):
            if coordinate_road[y][x] != 0:
                non_zero_coordinates.append((y, x))
    return new_road, non_zero_coordinates

def generate_speed_grid(rescaled_road, speed_grid_input):
    speed_grid = np.zeros_like(rescaled_road, dtype=object)
    for y in range(speed_grid.shape[0]):
        for x in range(speed_grid.shape[1]):
            if rescaled_road[y, x] == 1:
                speed_grid[y, x] = opposite_direction(speed_grid_input[y, x])
    return speed_grid


def opposite_direction(speed_value):
    first = abs(speed_value[0])
    second = -abs(speed_value[1])
    return (first, second)


"""
test = [[(4, 90), (4, 0)],
        [(4, 180), (4, 270)]]

speed_grid_input = np.array([
    [ (2, 3), (0, 0), (0, 0), (4, 5), (0, 0), (0, 0), (1, 1), (2, 3), (0, 0), (0, 0), (4, 5), (0, 0), (0, 0), (1, 1)],
    [ (2, 3), (0, 0), (0, 0), (4, 5), (0, 0), (0, 0), (1, 1), (2, 3), (0, 0), (0, 0), (4, 5), (0, 0), (0, 0), (1, 1)],
    [ (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
    [ (0, 0), (0, 0), (0, 0), (-1, 2), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, -2), (0, 0), (0, 0), (0, 0)],
    [ (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
    [ (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
    [ (3, 4), (0, 0), (0, 0), (5, 6), (0, 0), (0, 0), (7, 8), (3, 4), (0, 0), (0, 0), (5, 6), (0, 0), (0, 0), (7, 8)],
    [ (2, 3), (0, 0), (0, 0), (4, 5), (0, 0), (0, 0), (1, 1), (2, 3), (0, 0), (0, 0), (4, 5), (0, 0), (0, 0), (1, 1)],
    [ (2, 3), (0, 0), (0, 0), (4, 5), (0, 0), (0, 0), (1, 1), (2, 3), (0, 0), (0, 0), (4, 5), (0, 0), (0, 0), (1, 1)],
    [ (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
    [ (0, 0), (0, 0), (0, 0), (-1, 2), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (1, 2), (0, 0), (0, 0), (0, 0)],
    [ (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],
    [ (3, 4), (0, 0), (0, 0), (5, 6), (0, 0), (0, 0), (7, 8), (3, 4), (0, 0), (0, 0), (5, 6), (0, 0), (0, 0), (7, 8)]
])


rescaled_road = rescale_roads(test)
rescaled_speeds = generate_speed_grid(rescaled_road, speed_grid_input)

# Function to print the grid
def print_grid(grid):
    for row in grid:
        print(" ".join(map(str, row)))

print("Rescaled Road Grid:")
print_grid(rescaled_road)
print("\nRescaled Speed Grid:")
print_grid(rescaled_speeds)
"""